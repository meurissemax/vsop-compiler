
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftANDrightNOTnonassocLOWERLOWER_EQUALEQUALleftPLUSMINUSleftTIMESDIVrightISNULLrightPOWleftDOTAND ASSIGN BOOL CLASS COLON COMMA DIV DO DOT ELSE EQUAL EXTENDS FALSE IF IN INT32 INTEGER_LITERAL ISNULL LBRACE LET LOWER LOWER_EQUAL LPAR MINUS NEW NOT OBJECT_IDENTIFIER PLUS POW RBRACE RPAR SEMICOLON STRING STRING_LITERAL THEN TIMES TRUE TYPE_IDENTIFIER UNIT WHILE\n        program : class program\n                | class\n        \n        class : CLASS TYPE_IDENTIFIER class_body\n              | CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class_body\n              | TYPE_IDENTIFIER class_body\n              | TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class_body\n              | CLASS class_body\n              | CLASS EXTENDS TYPE_IDENTIFIER class_body\n        \n        class_body : LBRACE class_body_aux RBRACE\n                   | LBRACE empty RBRACE\n                   | class_body_aux RBRACE\n                   | empty RBRACE\n                   | LBRACE class_body_aux\n                   | LBRACE empty\n        \n        class_body_aux : field class_body_aux\n                       | method class_body_aux\n                       | field\n                       | method\n        \n        field : OBJECT_IDENTIFIER COLON type SEMICOLON\n              | OBJECT_IDENTIFIER COLON type ASSIGN expr SEMICOLON\n              | OBJECT_IDENTIFIER COLON type\n              | OBJECT_IDENTIFIER COLON type ASSIGN expr\n        \n        method : OBJECT_IDENTIFIER LPAR formals RPAR COLON type block\n               | OBJECT_IDENTIFIER LPAR formals RPAR block\n        \n        type : TYPE_IDENTIFIER\n             | INT32\n             | BOOL\n             | STRING\n             | UNIT\n        \n        formals : empty\n                | formal\n                | formal COMMA formals\n        \n        formal : OBJECT_IDENTIFIER COLON type\n               | OBJECT_IDENTIFIER\n        \n        block : LBRACE expr block_aux RBRACE\n        \n        block_aux : SEMICOLON expr block_aux\n                  | empty\n        \n        expr : IF expr THEN expr\n             | IF expr THEN expr ELSE expr\n             | IF expr expr\n             | IF expr expr ELSE expr\n        \n        expr : WHILE expr DO expr\n             | WHILE expr expr\n        \n        expr : LET OBJECT_IDENTIFIER COLON type IN expr\n             | LET OBJECT_IDENTIFIER COLON type ASSIGN expr IN expr\n             | LET OBJECT_IDENTIFIER IN expr\n             | LET OBJECT_IDENTIFIER ASSIGN expr IN expr\n        \n        expr : OBJECT_IDENTIFIER ASSIGN expr\n        \n        expr : NOT expr\n             | MINUS expr\n             | ISNULL expr\n        \n        expr : expr AND expr\n             | expr EQUAL expr\n             | expr LOWER expr\n             | expr LOWER_EQUAL expr\n             | expr PLUS expr\n             | expr MINUS expr\n             | expr TIMES expr\n             | expr DIV expr\n             | expr POW expr\n        \n        expr : OBJECT_IDENTIFIER LPAR args RPAR\n             | expr DOT OBJECT_IDENTIFIER LPAR args RPAR\n        \n        expr : NEW TYPE_IDENTIFIER\n        \n        expr : OBJECT_IDENTIFIER\n        \n        expr : literal\n        \n        expr : LPAR RPAR\n        \n        expr : LPAR expr RPAR\n        \n        expr : block\n        \n        args : empty\n             | expr\n             | expr COMMA args\n        \n        literal : integer_literal\n                | string_literal\n                | boolean_literal\n        \n        integer_literal : INTEGER_LITERAL\n        \n        string_literal : STRING_LITERAL\n        \n        boolean_literal : TRUE\n                        | FALSE\n        \n        empty :\n        '
    
_lr_action_items = {'CLASS':([0,2,7,9,12,13,15,17,20,21,22,23,24,25,30,31,32,33,34,35,36,37,38,43,44,45,50,51,60,61,62,63,64,66,67,68,69,72,76,90,91,92,93,95,98,102,103,104,105,106,107,108,109,110,112,115,120,124,125,129,130,131,133,135,139,145,146,147,149,151,],[3,3,-7,-79,-17,-18,-5,-3,-13,-14,-11,-12,-15,-16,-8,-9,-10,-21,-25,-26,-27,-28,-29,-6,-4,-19,-64,-22,-65,-68,-72,-73,-74,-75,-76,-77,-78,-24,-20,-49,-50,-51,-66,-63,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,-43,-67,-23,-61,-38,-50,-42,-46,-35,-41,-62,-39,-44,-47,-45,]),'TYPE_IDENTIFIER':([0,2,3,7,8,9,12,13,15,16,17,18,20,21,22,23,24,25,26,30,31,32,33,34,35,36,37,38,43,44,45,47,50,51,59,60,61,62,63,64,66,67,68,69,71,72,76,90,91,92,93,95,98,102,103,104,105,106,107,108,109,110,112,115,117,120,124,125,129,130,131,133,135,139,145,146,147,149,151,],[4,4,6,-7,19,-79,-17,-18,-5,28,-3,29,-13,-14,-11,-12,-15,-16,34,-8,-9,-10,-21,-25,-26,-27,-28,-29,-6,-4,-19,34,-64,-22,95,-65,-68,-72,-73,-74,-75,-76,-77,-78,34,-24,-20,-49,-50,-51,-66,-63,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,-43,34,-67,-23,-61,-38,-50,-42,-46,-35,-41,-62,-39,-44,-47,-45,]),'$end':([1,2,5,7,9,12,13,15,17,20,21,22,23,24,25,30,31,32,33,34,35,36,37,38,43,44,45,50,51,60,61,62,63,64,66,67,68,69,72,76,90,91,92,93,95,98,102,103,104,105,106,107,108,109,110,112,115,120,124,125,129,130,131,133,135,139,145,146,147,149,151,],[0,-2,-1,-7,-79,-17,-18,-5,-3,-13,-14,-11,-12,-15,-16,-8,-9,-10,-21,-25,-26,-27,-28,-29,-6,-4,-19,-64,-22,-65,-68,-72,-73,-74,-75,-76,-77,-78,-24,-20,-49,-50,-51,-66,-63,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,-43,-67,-23,-61,-38,-50,-42,-46,-35,-41,-62,-39,-44,-47,-45,]),'EXTENDS':([3,4,6,],[8,16,18,]),'LBRACE':([3,4,6,19,28,29,34,35,36,37,38,46,48,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,77,78,79,80,81,82,83,84,85,87,88,90,91,92,93,95,97,98,102,103,104,105,106,107,108,109,110,112,113,114,115,116,118,119,120,122,125,126,127,128,129,130,131,133,135,139,140,141,142,143,145,146,147,149,150,151,],[9,9,9,9,9,9,-25,-26,-27,-28,-29,65,65,-64,65,65,65,65,65,65,-65,-68,-72,-73,-74,65,-75,-76,-77,-78,65,65,65,65,65,65,65,65,65,65,65,65,65,-49,-50,-51,-66,-63,65,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,65,65,-43,65,65,65,-67,65,-61,65,65,65,-38,-50,-42,-46,-35,-41,65,65,65,65,-62,-39,-44,-47,65,-45,]),'RBRACE':([3,4,6,9,10,11,12,13,19,20,21,24,25,28,29,33,34,35,36,37,38,45,50,51,60,61,62,63,64,66,67,68,69,72,76,90,91,92,93,95,96,98,102,103,104,105,106,107,108,109,110,112,115,120,121,123,124,125,129,130,131,133,135,136,139,144,145,146,147,149,151,],[-79,-79,-79,-79,22,23,-17,-18,-79,31,32,-15,-16,-79,-79,-21,-25,-26,-27,-28,-29,-19,-64,-22,-65,-68,-72,-73,-74,-75,-76,-77,-78,-24,-20,-49,-50,-51,-66,-63,-79,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,-43,-67,135,-37,-23,-61,-38,-50,-42,-46,-35,-79,-41,-36,-62,-39,-44,-47,-45,]),'OBJECT_IDENTIFIER':([3,4,6,9,12,13,19,27,28,29,33,34,35,36,37,38,45,46,49,50,51,52,53,54,55,56,57,58,60,61,62,63,64,65,66,67,68,69,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,91,92,93,95,98,102,103,104,105,106,107,108,109,110,112,113,114,115,116,118,119,120,122,124,125,126,127,128,129,130,131,133,135,139,140,141,142,143,145,146,147,149,150,151,],[14,14,14,14,14,14,14,39,14,14,-21,-25,-26,-27,-28,-29,-19,50,39,-64,-22,50,50,89,50,50,50,50,-65,-68,-72,-73,-74,50,-75,-76,-77,-78,-24,50,50,-20,50,50,50,50,50,50,50,50,50,111,50,50,-49,-50,-51,-66,-63,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,50,50,-43,50,50,50,-67,50,-23,-61,50,50,50,-38,-50,-42,-46,-35,-41,50,50,50,50,-62,-39,-44,-47,50,-45,]),'COLON':([14,39,48,89,],[26,47,71,117,]),'LPAR':([14,46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,77,78,79,80,81,82,83,84,85,87,88,90,91,92,93,95,98,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,122,125,126,127,128,129,130,131,133,135,139,140,141,142,143,145,146,147,149,150,151,],[27,58,75,58,58,58,58,58,58,-65,-68,-72,-73,-74,58,-75,-76,-77,-78,58,58,58,58,58,58,58,58,58,58,58,58,58,-49,-50,-51,-66,-63,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,127,-40,58,58,-43,58,58,58,-67,58,-61,58,58,58,-38,-50,-42,-46,-35,-41,58,58,58,58,-62,-39,-44,-47,58,-45,]),'INT32':([26,47,71,117,],[35,35,35,35,]),'BOOL':([26,47,71,117,],[36,36,36,36,]),'STRING':([26,47,71,117,],[37,37,37,37,]),'UNIT':([26,47,71,117,],[38,38,38,38,]),'RPAR':([27,34,35,36,37,38,39,40,41,42,49,50,58,60,61,62,63,64,66,67,68,69,70,73,75,90,91,92,93,94,95,98,99,100,101,102,103,104,105,106,107,108,109,110,112,115,120,125,126,127,129,130,131,133,135,137,138,139,145,146,147,149,151,],[-79,-25,-26,-27,-28,-29,-34,48,-30,-31,-79,-64,93,-65,-68,-72,-73,-74,-75,-76,-77,-78,-33,-32,-79,-49,-50,-51,-66,120,-63,-48,125,-69,-70,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,-43,-67,-61,-79,-79,-38,-50,-42,-46,-35,-71,145,-41,-62,-39,-44,-47,-45,]),'SEMICOLON':([33,34,35,36,37,38,50,51,60,61,62,63,64,66,67,68,69,90,91,92,93,95,96,98,102,103,104,105,106,107,108,109,110,112,115,120,125,129,130,131,133,135,136,139,145,146,147,149,151,],[45,-25,-26,-27,-28,-29,-64,76,-65,-68,-72,-73,-74,-75,-76,-77,-78,-49,-50,-51,-66,-63,122,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,-43,-67,-61,-38,-50,-42,-46,-35,122,-41,-62,-39,-44,-47,-45,]),'ASSIGN':([33,34,35,36,37,38,50,89,132,],[46,-25,-26,-27,-28,-29,74,119,142,]),'COMMA':([34,35,36,37,38,39,42,50,60,61,62,63,64,66,67,68,69,70,90,91,92,93,95,98,101,102,103,104,105,106,107,108,109,110,112,115,120,125,129,130,131,133,135,139,145,146,147,149,151,],[-25,-26,-27,-28,-29,-34,49,-64,-65,-68,-72,-73,-74,-75,-76,-77,-78,-33,-49,-50,-51,-66,-63,-48,126,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,-43,-67,-61,-38,-50,-42,-46,-35,-41,-62,-39,-44,-47,-45,]),'IN':([34,35,36,37,38,50,60,61,62,63,64,66,67,68,69,89,90,91,92,93,95,98,102,103,104,105,106,107,108,109,110,112,115,120,125,129,130,131,132,133,134,135,139,145,146,147,148,149,151,],[-25,-26,-27,-28,-29,-64,-65,-68,-72,-73,-74,-75,-76,-77,-78,118,-49,-50,-51,-66,-63,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,-43,-67,-61,-38,-50,-42,141,-46,143,-35,-41,-62,-39,-44,150,-47,-45,]),'IF':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,77,78,79,80,81,82,83,84,85,87,88,90,91,92,93,95,98,102,103,104,105,106,107,108,109,110,112,113,114,115,116,118,119,120,122,125,126,127,128,129,130,131,133,135,139,140,141,142,143,145,146,147,149,150,151,],[52,-64,52,52,52,52,52,52,-65,-68,-72,-73,-74,52,-75,-76,-77,-78,52,52,52,52,52,52,52,52,52,52,52,52,52,-49,-50,-51,-66,-63,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,52,52,-43,52,52,52,-67,52,-61,52,52,52,-38,-50,-42,-46,-35,-41,52,52,52,52,-62,-39,-44,-47,52,-45,]),'WHILE':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,77,78,79,80,81,82,83,84,85,87,88,90,91,92,93,95,98,102,103,104,105,106,107,108,109,110,112,113,114,115,116,118,119,120,122,125,126,127,128,129,130,131,133,135,139,140,141,142,143,145,146,147,149,150,151,],[53,-64,53,53,53,53,53,53,-65,-68,-72,-73,-74,53,-75,-76,-77,-78,53,53,53,53,53,53,53,53,53,53,53,53,53,-49,-50,-51,-66,-63,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,53,53,-43,53,53,53,-67,53,-61,53,53,53,-38,-50,-42,-46,-35,-41,53,53,53,53,-62,-39,-44,-47,53,-45,]),'LET':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,77,78,79,80,81,82,83,84,85,87,88,90,91,92,93,95,98,102,103,104,105,106,107,108,109,110,112,113,114,115,116,118,119,120,122,125,126,127,128,129,130,131,133,135,139,140,141,142,143,145,146,147,149,150,151,],[54,-64,54,54,54,54,54,54,-65,-68,-72,-73,-74,54,-75,-76,-77,-78,54,54,54,54,54,54,54,54,54,54,54,54,54,-49,-50,-51,-66,-63,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,54,54,-43,54,54,54,-67,54,-61,54,54,54,-38,-50,-42,-46,-35,-41,54,54,54,54,-62,-39,-44,-47,54,-45,]),'NOT':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,77,78,79,80,81,82,83,84,85,87,88,90,91,92,93,95,98,102,103,104,105,106,107,108,109,110,112,113,114,115,116,118,119,120,122,125,126,127,128,129,130,131,133,135,139,140,141,142,143,145,146,147,149,150,151,],[55,-64,55,55,55,55,55,55,-65,-68,-72,-73,-74,55,-75,-76,-77,-78,55,55,55,55,55,55,55,55,55,55,55,55,55,-49,-50,-51,-66,-63,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,55,55,-43,55,55,55,-67,55,-61,55,55,55,-38,-50,-42,-46,-35,-41,55,55,55,55,-62,-39,-44,-47,55,-45,]),'MINUS':([46,50,51,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,77,78,79,80,81,82,83,84,85,87,88,90,91,92,93,94,95,96,98,101,102,103,104,105,106,107,108,109,110,112,113,114,115,116,118,119,120,122,125,126,127,128,129,130,131,133,134,135,136,139,140,141,142,143,145,146,147,148,149,150,151,],[56,-64,82,56,56,56,56,56,56,-65,-68,-72,-73,-74,56,-75,-76,-77,-78,56,56,56,56,56,56,56,56,56,56,56,114,114,82,-50,-51,-66,82,-63,82,82,82,82,82,82,82,-56,-57,-58,-59,-60,82,56,56,82,56,56,56,-67,56,-61,56,56,56,82,-50,82,82,82,-35,82,82,56,56,56,56,-62,82,82,82,82,56,82,]),'ISNULL':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,77,78,79,80,81,82,83,84,85,87,88,90,91,92,93,95,98,102,103,104,105,106,107,108,109,110,112,113,114,115,116,118,119,120,122,125,126,127,128,129,130,131,133,135,139,140,141,142,143,145,146,147,149,150,151,],[57,-64,57,57,57,57,57,57,-65,-68,-72,-73,-74,57,-75,-76,-77,-78,57,57,57,57,57,57,57,57,57,57,57,57,57,-49,-50,-51,-66,-63,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,57,57,-43,57,57,57,-67,57,-61,57,57,57,-38,-50,-42,-46,-35,-41,57,57,57,57,-62,-39,-44,-47,57,-45,]),'NEW':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,77,78,79,80,81,82,83,84,85,87,88,90,91,92,93,95,98,102,103,104,105,106,107,108,109,110,112,113,114,115,116,118,119,120,122,125,126,127,128,129,130,131,133,135,139,140,141,142,143,145,146,147,149,150,151,],[59,-64,59,59,59,59,59,59,-65,-68,-72,-73,-74,59,-75,-76,-77,-78,59,59,59,59,59,59,59,59,59,59,59,59,59,-49,-50,-51,-66,-63,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,59,59,-43,59,59,59,-67,59,-61,59,59,59,-38,-50,-42,-46,-35,-41,59,59,59,59,-62,-39,-44,-47,59,-45,]),'INTEGER_LITERAL':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,77,78,79,80,81,82,83,84,85,87,88,90,91,92,93,95,98,102,103,104,105,106,107,108,109,110,112,113,114,115,116,118,119,120,122,125,126,127,128,129,130,131,133,135,139,140,141,142,143,145,146,147,149,150,151,],[66,-64,66,66,66,66,66,66,-65,-68,-72,-73,-74,66,-75,-76,-77,-78,66,66,66,66,66,66,66,66,66,66,66,66,66,-49,-50,-51,-66,-63,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,66,66,-43,66,66,66,-67,66,-61,66,66,66,-38,-50,-42,-46,-35,-41,66,66,66,66,-62,-39,-44,-47,66,-45,]),'STRING_LITERAL':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,77,78,79,80,81,82,83,84,85,87,88,90,91,92,93,95,98,102,103,104,105,106,107,108,109,110,112,113,114,115,116,118,119,120,122,125,126,127,128,129,130,131,133,135,139,140,141,142,143,145,146,147,149,150,151,],[67,-64,67,67,67,67,67,67,-65,-68,-72,-73,-74,67,-75,-76,-77,-78,67,67,67,67,67,67,67,67,67,67,67,67,67,-49,-50,-51,-66,-63,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,67,67,-43,67,67,67,-67,67,-61,67,67,67,-38,-50,-42,-46,-35,-41,67,67,67,67,-62,-39,-44,-47,67,-45,]),'TRUE':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,77,78,79,80,81,82,83,84,85,87,88,90,91,92,93,95,98,102,103,104,105,106,107,108,109,110,112,113,114,115,116,118,119,120,122,125,126,127,128,129,130,131,133,135,139,140,141,142,143,145,146,147,149,150,151,],[68,-64,68,68,68,68,68,68,-65,-68,-72,-73,-74,68,-75,-76,-77,-78,68,68,68,68,68,68,68,68,68,68,68,68,68,-49,-50,-51,-66,-63,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,68,68,-43,68,68,68,-67,68,-61,68,68,68,-38,-50,-42,-46,-35,-41,68,68,68,68,-62,-39,-44,-47,68,-45,]),'FALSE':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,77,78,79,80,81,82,83,84,85,87,88,90,91,92,93,95,98,102,103,104,105,106,107,108,109,110,112,113,114,115,116,118,119,120,122,125,126,127,128,129,130,131,133,135,139,140,141,142,143,145,146,147,149,150,151,],[69,-64,69,69,69,69,69,69,-65,-68,-72,-73,-74,69,-75,-76,-77,-78,69,69,69,69,69,69,69,69,69,69,69,69,69,-49,-50,-51,-66,-63,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,69,69,-43,69,69,69,-67,69,-61,69,69,69,-38,-50,-42,-46,-35,-41,69,69,69,69,-62,-39,-44,-47,69,-45,]),'AND':([50,51,60,61,62,63,64,66,67,68,69,87,88,90,91,92,93,94,95,96,98,101,102,103,104,105,106,107,108,109,110,112,115,120,125,129,130,131,133,134,135,136,139,145,146,147,148,149,151,],[-64,77,-65,-68,-72,-73,-74,-75,-76,-77,-78,77,77,-49,-50,-51,-66,77,-63,77,77,77,-52,-53,-54,-55,-56,-57,-58,-59,-60,77,77,-67,-61,77,-50,77,77,77,-35,77,77,-62,77,77,77,77,77,]),'EQUAL':([50,51,60,61,62,63,64,66,67,68,69,87,88,90,91,92,93,94,95,96,98,101,102,103,104,105,106,107,108,109,110,112,115,120,125,129,130,131,133,134,135,136,139,145,146,147,148,149,151,],[-64,78,-65,-68,-72,-73,-74,-75,-76,-77,-78,78,78,78,-50,-51,-66,78,-63,78,78,78,78,None,None,None,-56,-57,-58,-59,-60,78,78,-67,-61,78,-50,78,78,78,-35,78,78,-62,78,78,78,78,78,]),'LOWER':([50,51,60,61,62,63,64,66,67,68,69,87,88,90,91,92,93,94,95,96,98,101,102,103,104,105,106,107,108,109,110,112,115,120,125,129,130,131,133,134,135,136,139,145,146,147,148,149,151,],[-64,79,-65,-68,-72,-73,-74,-75,-76,-77,-78,79,79,79,-50,-51,-66,79,-63,79,79,79,79,None,None,None,-56,-57,-58,-59,-60,79,79,-67,-61,79,-50,79,79,79,-35,79,79,-62,79,79,79,79,79,]),'LOWER_EQUAL':([50,51,60,61,62,63,64,66,67,68,69,87,88,90,91,92,93,94,95,96,98,101,102,103,104,105,106,107,108,109,110,112,115,120,125,129,130,131,133,134,135,136,139,145,146,147,148,149,151,],[-64,80,-65,-68,-72,-73,-74,-75,-76,-77,-78,80,80,80,-50,-51,-66,80,-63,80,80,80,80,None,None,None,-56,-57,-58,-59,-60,80,80,-67,-61,80,-50,80,80,80,-35,80,80,-62,80,80,80,80,80,]),'PLUS':([50,51,60,61,62,63,64,66,67,68,69,87,88,90,91,92,93,94,95,96,98,101,102,103,104,105,106,107,108,109,110,112,115,120,125,129,130,131,133,134,135,136,139,145,146,147,148,149,151,],[-64,81,-65,-68,-72,-73,-74,-75,-76,-77,-78,81,81,81,-50,-51,-66,81,-63,81,81,81,81,81,81,81,-56,-57,-58,-59,-60,81,81,-67,-61,81,-50,81,81,81,-35,81,81,-62,81,81,81,81,81,]),'TIMES':([50,51,60,61,62,63,64,66,67,68,69,87,88,90,91,92,93,94,95,96,98,101,102,103,104,105,106,107,108,109,110,112,115,120,125,129,130,131,133,134,135,136,139,145,146,147,148,149,151,],[-64,83,-65,-68,-72,-73,-74,-75,-76,-77,-78,83,83,83,83,-51,-66,83,-63,83,83,83,83,83,83,83,83,83,-58,-59,-60,83,83,-67,-61,83,83,83,83,83,-35,83,83,-62,83,83,83,83,83,]),'DIV':([50,51,60,61,62,63,64,66,67,68,69,87,88,90,91,92,93,94,95,96,98,101,102,103,104,105,106,107,108,109,110,112,115,120,125,129,130,131,133,134,135,136,139,145,146,147,148,149,151,],[-64,84,-65,-68,-72,-73,-74,-75,-76,-77,-78,84,84,84,84,-51,-66,84,-63,84,84,84,84,84,84,84,84,84,-58,-59,-60,84,84,-67,-61,84,84,84,84,84,-35,84,84,-62,84,84,84,84,84,]),'POW':([50,51,60,61,62,63,64,66,67,68,69,87,88,90,91,92,93,94,95,96,98,101,102,103,104,105,106,107,108,109,110,112,115,120,125,129,130,131,133,134,135,136,139,145,146,147,148,149,151,],[-64,85,-65,-68,-72,-73,-74,-75,-76,-77,-78,85,85,85,85,85,-66,85,-63,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-67,-61,85,85,85,85,85,-35,85,85,-62,85,85,85,85,85,]),'DOT':([50,51,60,61,62,63,64,66,67,68,69,87,88,90,91,92,93,94,95,96,98,101,102,103,104,105,106,107,108,109,110,112,115,120,125,129,130,131,133,134,135,136,139,145,146,147,148,149,151,],[-64,86,-65,-68,-72,-73,-74,-75,-76,-77,-78,86,86,86,86,86,-66,86,-63,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-67,-61,86,86,86,86,86,-35,86,86,-62,86,86,86,86,86,]),'THEN':([50,60,61,62,63,64,66,67,68,69,87,90,91,92,93,95,98,102,103,104,105,106,107,108,109,110,112,115,120,125,129,130,131,133,135,139,145,146,147,149,151,],[-64,-65,-68,-72,-73,-74,-75,-76,-77,-78,113,-49,-50,-51,-66,-63,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,-43,-67,-61,-38,-50,-42,-46,-35,-41,-62,-39,-44,-47,-45,]),'DO':([50,60,61,62,63,64,66,67,68,69,88,90,91,92,93,95,98,102,103,104,105,106,107,108,109,110,112,115,120,125,129,130,131,133,135,139,145,146,147,149,151,],[-64,-65,-68,-72,-73,-74,-75,-76,-77,-78,116,-49,-50,-51,-66,-63,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,-40,-43,-67,-61,-38,-50,-42,-46,-35,-41,-62,-39,-44,-47,-45,]),'ELSE':([50,60,61,62,63,64,66,67,68,69,90,91,92,93,95,98,102,103,104,105,106,107,108,109,110,112,115,120,125,129,130,131,133,135,139,145,146,147,149,151,],[-64,-65,-68,-72,-73,-74,-75,-76,-77,-78,-49,-50,-51,-66,-63,-48,-52,-53,-54,-55,-56,-57,-58,-59,-60,128,-43,-67,-61,140,-50,-42,-46,-35,-41,-62,-39,-44,-47,-45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,5,]),'class':([0,2,],[2,2,]),'class_body':([3,4,6,19,28,29,],[7,15,17,30,43,44,]),'class_body_aux':([3,4,6,9,12,13,19,28,29,],[10,10,10,20,24,25,10,10,10,]),'empty':([3,4,6,9,19,27,28,29,49,75,96,126,127,136,],[11,11,11,21,11,41,11,11,41,100,123,100,100,123,]),'field':([3,4,6,9,12,13,19,28,29,],[12,12,12,12,12,12,12,12,12,]),'method':([3,4,6,9,12,13,19,28,29,],[13,13,13,13,13,13,13,13,13,]),'type':([26,47,71,117,],[33,70,97,132,]),'formals':([27,49,],[40,73,]),'formal':([27,49,],[42,42,]),'expr':([46,52,53,55,56,57,58,65,74,75,77,78,79,80,81,82,83,84,85,87,88,113,114,116,118,119,122,126,127,128,140,141,142,143,150,],[51,87,88,90,91,92,94,96,98,101,102,103,104,105,106,107,108,109,110,112,115,129,130,131,133,134,136,101,101,139,146,147,148,149,151,]),'literal':([46,52,53,55,56,57,58,65,74,75,77,78,79,80,81,82,83,84,85,87,88,113,114,116,118,119,122,126,127,128,140,141,142,143,150,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'block':([46,48,52,53,55,56,57,58,65,74,75,77,78,79,80,81,82,83,84,85,87,88,97,113,114,116,118,119,122,126,127,128,140,141,142,143,150,],[61,72,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,124,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'integer_literal':([46,52,53,55,56,57,58,65,74,75,77,78,79,80,81,82,83,84,85,87,88,113,114,116,118,119,122,126,127,128,140,141,142,143,150,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'string_literal':([46,52,53,55,56,57,58,65,74,75,77,78,79,80,81,82,83,84,85,87,88,113,114,116,118,119,122,126,127,128,140,141,142,143,150,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'boolean_literal':([46,52,53,55,56,57,58,65,74,75,77,78,79,80,81,82,83,84,85,87,88,113,114,116,118,119,122,126,127,128,140,141,142,143,150,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'args':([75,126,127,],[99,137,138,]),'block_aux':([96,136,],[121,144,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class program','program',2,'p_program','parser.py',87),
  ('program -> class','program',1,'p_program','parser.py',88),
  ('class -> CLASS TYPE_IDENTIFIER class_body','class',3,'p_class','parser.py',95),
  ('class -> CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class_body','class',5,'p_class','parser.py',96),
  ('class -> TYPE_IDENTIFIER class_body','class',2,'p_class','parser.py',97),
  ('class -> TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class_body','class',4,'p_class','parser.py',98),
  ('class -> CLASS class_body','class',2,'p_class','parser.py',99),
  ('class -> CLASS EXTENDS TYPE_IDENTIFIER class_body','class',4,'p_class','parser.py',100),
  ('class_body -> LBRACE class_body_aux RBRACE','class_body',3,'p_class_body','parser.py',143),
  ('class_body -> LBRACE empty RBRACE','class_body',3,'p_class_body','parser.py',144),
  ('class_body -> class_body_aux RBRACE','class_body',2,'p_class_body','parser.py',145),
  ('class_body -> empty RBRACE','class_body',2,'p_class_body','parser.py',146),
  ('class_body -> LBRACE class_body_aux','class_body',2,'p_class_body','parser.py',147),
  ('class_body -> LBRACE empty','class_body',2,'p_class_body','parser.py',148),
  ('class_body_aux -> field class_body_aux','class_body_aux',2,'p_class_body_aux','parser.py',165),
  ('class_body_aux -> method class_body_aux','class_body_aux',2,'p_class_body_aux','parser.py',166),
  ('class_body_aux -> field','class_body_aux',1,'p_class_body_aux','parser.py',167),
  ('class_body_aux -> method','class_body_aux',1,'p_class_body_aux','parser.py',168),
  ('field -> OBJECT_IDENTIFIER COLON type SEMICOLON','field',4,'p_field','parser.py',184),
  ('field -> OBJECT_IDENTIFIER COLON type ASSIGN expr SEMICOLON','field',6,'p_field','parser.py',185),
  ('field -> OBJECT_IDENTIFIER COLON type','field',3,'p_field','parser.py',186),
  ('field -> OBJECT_IDENTIFIER COLON type ASSIGN expr','field',5,'p_field','parser.py',187),
  ('method -> OBJECT_IDENTIFIER LPAR formals RPAR COLON type block','method',7,'p_method','parser.py',208),
  ('method -> OBJECT_IDENTIFIER LPAR formals RPAR block','method',5,'p_method','parser.py',209),
  ('type -> TYPE_IDENTIFIER','type',1,'p_type','parser.py',232),
  ('type -> INT32','type',1,'p_type','parser.py',233),
  ('type -> BOOL','type',1,'p_type','parser.py',234),
  ('type -> STRING','type',1,'p_type','parser.py',235),
  ('type -> UNIT','type',1,'p_type','parser.py',236),
  ('formals -> empty','formals',1,'p_formals','parser.py',243),
  ('formals -> formal','formals',1,'p_formals','parser.py',244),
  ('formals -> formal COMMA formals','formals',3,'p_formals','parser.py',245),
  ('formal -> OBJECT_IDENTIFIER COLON type','formal',3,'p_formal','parser.py',260),
  ('formal -> OBJECT_IDENTIFIER','formal',1,'p_formal','parser.py',261),
  ('block -> LBRACE expr block_aux RBRACE','block',4,'p_block','parser.py',277),
  ('block_aux -> SEMICOLON expr block_aux','block_aux',3,'p_block_aux','parser.py',302),
  ('block_aux -> empty','block_aux',1,'p_block_aux','parser.py',303),
  ('expr -> IF expr THEN expr','expr',4,'p_expr_if','parser.py',321),
  ('expr -> IF expr THEN expr ELSE expr','expr',6,'p_expr_if','parser.py',322),
  ('expr -> IF expr expr','expr',3,'p_expr_if','parser.py',323),
  ('expr -> IF expr expr ELSE expr','expr',5,'p_expr_if','parser.py',324),
  ('expr -> WHILE expr DO expr','expr',4,'p_expr_while','parser.py',345),
  ('expr -> WHILE expr expr','expr',3,'p_expr_while','parser.py',346),
  ('expr -> LET OBJECT_IDENTIFIER COLON type IN expr','expr',6,'p_expr_let','parser.py',362),
  ('expr -> LET OBJECT_IDENTIFIER COLON type ASSIGN expr IN expr','expr',8,'p_expr_let','parser.py',363),
  ('expr -> LET OBJECT_IDENTIFIER IN expr','expr',4,'p_expr_let','parser.py',364),
  ('expr -> LET OBJECT_IDENTIFIER ASSIGN expr IN expr','expr',6,'p_expr_let','parser.py',365),
  ('expr -> OBJECT_IDENTIFIER ASSIGN expr','expr',3,'p_expr_assign','parser.py',386),
  ('expr -> NOT expr','expr',2,'p_expr_unop','parser.py',398),
  ('expr -> MINUS expr','expr',2,'p_expr_unop','parser.py',399),
  ('expr -> ISNULL expr','expr',2,'p_expr_unop','parser.py',400),
  ('expr -> expr AND expr','expr',3,'p_expr_binop','parser.py',412),
  ('expr -> expr EQUAL expr','expr',3,'p_expr_binop','parser.py',413),
  ('expr -> expr LOWER expr','expr',3,'p_expr_binop','parser.py',414),
  ('expr -> expr LOWER_EQUAL expr','expr',3,'p_expr_binop','parser.py',415),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binop','parser.py',416),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binop','parser.py',417),
  ('expr -> expr TIMES expr','expr',3,'p_expr_binop','parser.py',418),
  ('expr -> expr DIV expr','expr',3,'p_expr_binop','parser.py',419),
  ('expr -> expr POW expr','expr',3,'p_expr_binop','parser.py',420),
  ('expr -> OBJECT_IDENTIFIER LPAR args RPAR','expr',4,'p_expr_call','parser.py',432),
  ('expr -> expr DOT OBJECT_IDENTIFIER LPAR args RPAR','expr',6,'p_expr_call','parser.py',433),
  ('expr -> NEW TYPE_IDENTIFIER','expr',2,'p_expr_new','parser.py',463),
  ('expr -> OBJECT_IDENTIFIER','expr',1,'p_expr_obj_id','parser.py',475),
  ('expr -> literal','expr',1,'p_expr_literal','parser.py',487),
  ('expr -> LPAR RPAR','expr',2,'p_expr_unit','parser.py',494),
  ('expr -> LPAR expr RPAR','expr',3,'p_expr_par','parser.py',506),
  ('expr -> block','expr',1,'p_expr_block','parser.py',513),
  ('args -> empty','args',1,'p_args','parser.py',520),
  ('args -> expr','args',1,'p_args','parser.py',521),
  ('args -> expr COMMA args','args',3,'p_args','parser.py',522),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',537),
  ('literal -> string_literal','literal',1,'p_literal','parser.py',538),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',539),
  ('integer_literal -> INTEGER_LITERAL','integer_literal',1,'p_integer_literal','parser.py',546),
  ('string_literal -> STRING_LITERAL','string_literal',1,'p_string_literal','parser.py',558),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',570),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',571),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',583),
]
