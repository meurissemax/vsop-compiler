
# parsetabext.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftANDrightNOTnonassocLOWERLOWER_EQUALGREATERGREATER_EQUALEQUALleftPLUSMINUSleftTIMESDIVrightISNULLrightPOWleftDOTAND ASSIGN BOOL CLASS COLON COMMA DIV DO DOT ELSE EQUAL EXTENDS FALSE GREATER GREATER_EQUAL IF IN INT32 INTEGER_LITERAL ISNULL LBRACE LET LOWER LOWER_EQUAL LPAR MINUS NEW NOT OBJECT_IDENTIFIER PLUS POW RBRACE RPAR SEMICOLON STRING STRING_LITERAL THEN TIMES TRUE TYPE_IDENTIFIER UNIT WHILE\n        program : class program\n                | class\n        \n        class : CLASS TYPE_IDENTIFIER class_body\n              | CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class_body\n              | TYPE_IDENTIFIER class_body\n              | TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class_body\n              | CLASS class_body\n              | CLASS EXTENDS TYPE_IDENTIFIER class_body\n        \n        class_body : LBRACE class_body_aux RBRACE\n                   | LBRACE empty RBRACE\n                   | class_body_aux RBRACE\n                   | empty RBRACE\n                   | LBRACE class_body_aux\n                   | LBRACE empty\n        \n        class_body_aux : field class_body_aux\n                       | method class_body_aux\n                       | field\n                       | method\n        \n        field : OBJECT_IDENTIFIER COLON type SEMICOLON\n              | OBJECT_IDENTIFIER COLON type ASSIGN expr SEMICOLON\n              | OBJECT_IDENTIFIER COLON type\n              | OBJECT_IDENTIFIER COLON type ASSIGN expr\n        \n        method : OBJECT_IDENTIFIER LPAR formals RPAR COLON type block\n               | OBJECT_IDENTIFIER LPAR formals RPAR block\n        \n        type : TYPE_IDENTIFIER\n             | INT32\n             | BOOL\n             | STRING\n             | UNIT\n        \n        formals : empty\n                | formal\n                | formal COMMA formals\n        \n        formal : OBJECT_IDENTIFIER COLON type\n               | OBJECT_IDENTIFIER\n        \n        block : LBRACE expr block_aux RBRACE\n        \n        block_aux : SEMICOLON expr block_aux\n                  | empty\n        \n        expr : IF expr THEN expr\n             | IF expr THEN expr ELSE expr\n             | IF expr expr\n             | IF expr expr ELSE expr\n        \n        expr : WHILE expr DO expr\n             | WHILE expr expr\n        \n        expr : LET OBJECT_IDENTIFIER COLON type IN expr\n             | LET OBJECT_IDENTIFIER COLON type ASSIGN expr IN expr\n             | LET OBJECT_IDENTIFIER IN expr\n             | LET OBJECT_IDENTIFIER ASSIGN expr IN expr\n        \n        expr : OBJECT_IDENTIFIER ASSIGN expr\n        \n        expr : NOT expr\n             | MINUS expr\n             | ISNULL expr\n        \n        expr : OBJECT_IDENTIFIER LPAR args RPAR\n             | expr DOT OBJECT_IDENTIFIER LPAR args RPAR\n        \n        expr : NEW TYPE_IDENTIFIER\n        \n        expr : OBJECT_IDENTIFIER\n        \n        expr : literal\n        \n        expr : LPAR RPAR\n        \n        expr : LPAR expr RPAR\n        \n        expr : block\n        \n        args : empty\n             | expr\n             | expr COMMA args\n        \n        literal : integer_literal\n                | string_literal\n                | boolean_literal\n        \n        integer_literal : INTEGER_LITERAL\n        \n        string_literal : STRING_LITERAL\n        \n        boolean_literal : TRUE\n                        | FALSE\n        \n        empty :\n        \n        expr : expr AND expr\n             | expr EQUAL expr\n             | expr LOWER expr\n             | expr LOWER_EQUAL expr\n             | expr GREATER expr\n             | expr GREATER_EQUAL expr\n             | expr PLUS expr\n             | expr MINUS expr\n             | expr TIMES expr\n             | expr DIV expr\n             | expr POW expr\n        '
    
_lr_action_items = {'CLASS':([0,2,7,9,12,13,15,17,20,21,22,23,24,25,30,31,32,33,34,35,36,37,38,43,44,45,50,51,60,61,62,63,64,66,67,68,69,72,76,92,93,94,95,97,100,105,106,107,108,109,110,111,112,113,114,115,116,119,124,128,129,133,134,135,137,139,143,149,150,151,153,155,],[3,3,-7,-70,-17,-18,-5,-3,-13,-14,-11,-12,-15,-16,-8,-9,-10,-21,-25,-26,-27,-28,-29,-6,-4,-19,-55,-22,-56,-59,-63,-64,-65,-66,-67,-68,-69,-24,-20,-49,-50,-51,-57,-54,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,-43,-58,-23,-52,-38,-50,-42,-46,-35,-41,-53,-39,-44,-47,-45,]),'TYPE_IDENTIFIER':([0,2,3,7,8,9,12,13,15,16,17,18,20,21,22,23,24,25,26,30,31,32,33,34,35,36,37,38,43,44,45,47,50,51,59,60,61,62,63,64,66,67,68,69,71,72,76,92,93,94,95,97,100,105,106,107,108,109,110,111,112,113,114,115,116,119,121,124,128,129,133,134,135,137,139,143,149,150,151,153,155,],[4,4,6,-7,19,-70,-17,-18,-5,28,-3,29,-13,-14,-11,-12,-15,-16,34,-8,-9,-10,-21,-25,-26,-27,-28,-29,-6,-4,-19,34,-55,-22,97,-56,-59,-63,-64,-65,-66,-67,-68,-69,34,-24,-20,-49,-50,-51,-57,-54,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,-43,34,-58,-23,-52,-38,-50,-42,-46,-35,-41,-53,-39,-44,-47,-45,]),'$end':([1,2,5,7,9,12,13,15,17,20,21,22,23,24,25,30,31,32,33,34,35,36,37,38,43,44,45,50,51,60,61,62,63,64,66,67,68,69,72,76,92,93,94,95,97,100,105,106,107,108,109,110,111,112,113,114,115,116,119,124,128,129,133,134,135,137,139,143,149,150,151,153,155,],[0,-2,-1,-7,-70,-17,-18,-5,-3,-13,-14,-11,-12,-15,-16,-8,-9,-10,-21,-25,-26,-27,-28,-29,-6,-4,-19,-55,-22,-56,-59,-63,-64,-65,-66,-67,-68,-69,-24,-20,-49,-50,-51,-57,-54,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,-43,-58,-23,-52,-38,-50,-42,-46,-35,-41,-53,-39,-44,-47,-45,]),'EXTENDS':([3,4,6,],[8,16,18,]),'LBRACE':([3,4,6,19,28,29,34,35,36,37,38,46,48,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,126,129,130,131,132,133,134,135,137,139,143,144,145,146,147,149,150,151,153,154,155,],[9,9,9,9,9,9,-25,-26,-27,-28,-29,65,65,-55,65,65,65,65,65,65,-56,-59,-63,-64,-65,65,-66,-67,-68,-69,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-49,-50,-51,-57,-54,65,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,65,65,-43,65,65,65,-58,65,-52,65,65,65,-38,-50,-42,-46,-35,-41,65,65,65,65,-53,-39,-44,-47,65,-45,]),'RBRACE':([3,4,6,9,10,11,12,13,19,20,21,24,25,28,29,33,34,35,36,37,38,45,50,51,60,61,62,63,64,66,67,68,69,72,76,92,93,94,95,97,98,100,105,106,107,108,109,110,111,112,113,114,115,116,119,124,125,127,128,129,133,134,135,137,139,140,143,148,149,150,151,153,155,],[-70,-70,-70,-70,22,23,-17,-18,-70,31,32,-15,-16,-70,-70,-21,-25,-26,-27,-28,-29,-19,-55,-22,-56,-59,-63,-64,-65,-66,-67,-68,-69,-24,-20,-49,-50,-51,-57,-54,-70,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,-43,-58,139,-37,-23,-52,-38,-50,-42,-46,-35,-70,-41,-36,-53,-39,-44,-47,-45,]),'OBJECT_IDENTIFIER':([3,4,6,9,12,13,19,27,28,29,33,34,35,36,37,38,45,46,49,50,51,52,53,54,55,56,57,58,60,61,62,63,64,65,66,67,68,69,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,97,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,126,128,129,130,131,132,133,134,135,137,139,143,144,145,146,147,149,150,151,153,154,155,],[14,14,14,14,14,14,14,39,14,14,-21,-25,-26,-27,-28,-29,-19,50,39,-55,-22,50,50,91,50,50,50,50,-56,-59,-63,-64,-65,50,-66,-67,-68,-69,-24,50,50,-20,104,50,50,50,50,50,50,50,50,50,50,50,50,50,-49,-50,-51,-57,-54,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,50,50,-43,50,50,50,-58,50,-23,-52,50,50,50,-38,-50,-42,-46,-35,-41,50,50,50,50,-53,-39,-44,-47,50,-45,]),'COLON':([14,39,48,91,],[26,47,71,121,]),'LPAR':([14,46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,97,100,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,126,129,130,131,132,133,134,135,137,139,143,144,145,146,147,149,150,151,153,154,155,],[27,58,75,58,58,58,58,58,58,-56,-59,-63,-64,-65,58,-66,-67,-68,-69,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-49,-50,-51,-57,-54,-48,131,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,58,58,-43,58,58,58,-58,58,-52,58,58,58,-38,-50,-42,-46,-35,-41,58,58,58,58,-53,-39,-44,-47,58,-45,]),'INT32':([26,47,71,121,],[35,35,35,35,]),'BOOL':([26,47,71,121,],[36,36,36,36,]),'STRING':([26,47,71,121,],[37,37,37,37,]),'UNIT':([26,47,71,121,],[38,38,38,38,]),'RPAR':([27,34,35,36,37,38,39,40,41,42,49,50,58,60,61,62,63,64,66,67,68,69,70,73,75,92,93,94,95,96,97,100,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,119,124,129,130,131,133,134,135,137,139,141,142,143,149,150,151,153,155,],[-70,-25,-26,-27,-28,-29,-34,48,-30,-31,-70,-55,95,-56,-59,-63,-64,-65,-66,-67,-68,-69,-33,-32,-70,-49,-50,-51,-57,124,-54,-48,129,-60,-61,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,-43,-58,-52,-70,-70,-38,-50,-42,-46,-35,-62,149,-41,-53,-39,-44,-47,-45,]),'SEMICOLON':([33,34,35,36,37,38,50,51,60,61,62,63,64,66,67,68,69,92,93,94,95,97,98,100,105,106,107,108,109,110,111,112,113,114,115,116,119,124,129,133,134,135,137,139,140,143,149,150,151,153,155,],[45,-25,-26,-27,-28,-29,-55,76,-56,-59,-63,-64,-65,-66,-67,-68,-69,-49,-50,-51,-57,-54,126,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,-43,-58,-52,-38,-50,-42,-46,-35,126,-41,-53,-39,-44,-47,-45,]),'ASSIGN':([33,34,35,36,37,38,50,91,136,],[46,-25,-26,-27,-28,-29,74,123,146,]),'COMMA':([34,35,36,37,38,39,42,50,60,61,62,63,64,66,67,68,69,70,92,93,94,95,97,100,103,105,106,107,108,109,110,111,112,113,114,115,116,119,124,129,133,134,135,137,139,143,149,150,151,153,155,],[-25,-26,-27,-28,-29,-34,49,-55,-56,-59,-63,-64,-65,-66,-67,-68,-69,-33,-49,-50,-51,-57,-54,-48,130,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,-43,-58,-52,-38,-50,-42,-46,-35,-41,-53,-39,-44,-47,-45,]),'IN':([34,35,36,37,38,50,60,61,62,63,64,66,67,68,69,91,92,93,94,95,97,100,105,106,107,108,109,110,111,112,113,114,115,116,119,124,129,133,134,135,136,137,138,139,143,149,150,151,152,153,155,],[-25,-26,-27,-28,-29,-55,-56,-59,-63,-64,-65,-66,-67,-68,-69,122,-49,-50,-51,-57,-54,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,-43,-58,-52,-38,-50,-42,145,-46,147,-35,-41,-53,-39,-44,154,-47,-45,]),'IF':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,97,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,126,129,130,131,132,133,134,135,137,139,143,144,145,146,147,149,150,151,153,154,155,],[52,-55,52,52,52,52,52,52,-56,-59,-63,-64,-65,52,-66,-67,-68,-69,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-49,-50,-51,-57,-54,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,52,52,-43,52,52,52,-58,52,-52,52,52,52,-38,-50,-42,-46,-35,-41,52,52,52,52,-53,-39,-44,-47,52,-45,]),'WHILE':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,97,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,126,129,130,131,132,133,134,135,137,139,143,144,145,146,147,149,150,151,153,154,155,],[53,-55,53,53,53,53,53,53,-56,-59,-63,-64,-65,53,-66,-67,-68,-69,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-49,-50,-51,-57,-54,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,53,53,-43,53,53,53,-58,53,-52,53,53,53,-38,-50,-42,-46,-35,-41,53,53,53,53,-53,-39,-44,-47,53,-45,]),'LET':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,97,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,126,129,130,131,132,133,134,135,137,139,143,144,145,146,147,149,150,151,153,154,155,],[54,-55,54,54,54,54,54,54,-56,-59,-63,-64,-65,54,-66,-67,-68,-69,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-49,-50,-51,-57,-54,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,54,54,-43,54,54,54,-58,54,-52,54,54,54,-38,-50,-42,-46,-35,-41,54,54,54,54,-53,-39,-44,-47,54,-45,]),'NOT':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,97,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,126,129,130,131,132,133,134,135,137,139,143,144,145,146,147,149,150,151,153,154,155,],[55,-55,55,55,55,55,55,55,-56,-59,-63,-64,-65,55,-66,-67,-68,-69,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-49,-50,-51,-57,-54,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,55,55,-43,55,55,55,-58,55,-52,55,55,55,-38,-50,-42,-46,-35,-41,55,55,55,55,-53,-39,-44,-47,55,-45,]),'MINUS':([46,50,51,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,96,97,98,100,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,126,129,130,131,132,133,134,135,137,138,139,140,143,144,145,146,147,149,150,151,152,153,154,155,],[56,-55,85,56,56,56,56,56,56,-56,-59,-63,-64,-65,56,-66,-67,-68,-69,56,56,56,56,56,56,56,56,56,56,56,56,56,118,118,85,-50,-51,-57,85,-54,85,85,85,85,85,85,85,85,85,-77,-78,-79,-80,-81,85,56,56,85,56,56,56,-58,56,-52,56,56,56,85,-50,85,85,85,-35,85,85,56,56,56,56,-53,85,85,85,85,56,85,]),'ISNULL':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,97,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,126,129,130,131,132,133,134,135,137,139,143,144,145,146,147,149,150,151,153,154,155,],[57,-55,57,57,57,57,57,57,-56,-59,-63,-64,-65,57,-66,-67,-68,-69,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-49,-50,-51,-57,-54,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,57,57,-43,57,57,57,-58,57,-52,57,57,57,-38,-50,-42,-46,-35,-41,57,57,57,57,-53,-39,-44,-47,57,-45,]),'NEW':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,97,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,126,129,130,131,132,133,134,135,137,139,143,144,145,146,147,149,150,151,153,154,155,],[59,-55,59,59,59,59,59,59,-56,-59,-63,-64,-65,59,-66,-67,-68,-69,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-49,-50,-51,-57,-54,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,59,59,-43,59,59,59,-58,59,-52,59,59,59,-38,-50,-42,-46,-35,-41,59,59,59,59,-53,-39,-44,-47,59,-45,]),'INTEGER_LITERAL':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,97,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,126,129,130,131,132,133,134,135,137,139,143,144,145,146,147,149,150,151,153,154,155,],[66,-55,66,66,66,66,66,66,-56,-59,-63,-64,-65,66,-66,-67,-68,-69,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-49,-50,-51,-57,-54,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,66,66,-43,66,66,66,-58,66,-52,66,66,66,-38,-50,-42,-46,-35,-41,66,66,66,66,-53,-39,-44,-47,66,-45,]),'STRING_LITERAL':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,97,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,126,129,130,131,132,133,134,135,137,139,143,144,145,146,147,149,150,151,153,154,155,],[67,-55,67,67,67,67,67,67,-56,-59,-63,-64,-65,67,-66,-67,-68,-69,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-49,-50,-51,-57,-54,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,67,67,-43,67,67,67,-58,67,-52,67,67,67,-38,-50,-42,-46,-35,-41,67,67,67,67,-53,-39,-44,-47,67,-45,]),'TRUE':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,97,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,126,129,130,131,132,133,134,135,137,139,143,144,145,146,147,149,150,151,153,154,155,],[68,-55,68,68,68,68,68,68,-56,-59,-63,-64,-65,68,-66,-67,-68,-69,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-49,-50,-51,-57,-54,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,68,68,-43,68,68,68,-58,68,-52,68,68,68,-38,-50,-42,-46,-35,-41,68,68,68,68,-53,-39,-44,-47,68,-45,]),'FALSE':([46,50,52,53,55,56,57,58,60,61,62,63,64,65,66,67,68,69,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,97,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,126,129,130,131,132,133,134,135,137,139,143,144,145,146,147,149,150,151,153,154,155,],[69,-55,69,69,69,69,69,69,-56,-59,-63,-64,-65,69,-66,-67,-68,-69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-49,-50,-51,-57,-54,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,69,69,-43,69,69,69,-58,69,-52,69,69,69,-38,-50,-42,-46,-35,-41,69,69,69,69,-53,-39,-44,-47,69,-45,]),'DOT':([50,51,60,61,62,63,64,66,67,68,69,89,90,92,93,94,95,96,97,98,100,103,105,106,107,108,109,110,111,112,113,114,115,116,119,124,129,133,134,135,137,138,139,140,143,149,150,151,152,153,155,],[-55,77,-56,-59,-63,-64,-65,-66,-67,-68,-69,77,77,77,77,77,-57,77,-54,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-58,-52,77,77,77,77,77,-35,77,77,-53,77,77,77,77,77,]),'AND':([50,51,60,61,62,63,64,66,67,68,69,89,90,92,93,94,95,96,97,98,100,103,105,106,107,108,109,110,111,112,113,114,115,116,119,124,129,133,134,135,137,138,139,140,143,149,150,151,152,153,155,],[-55,78,-56,-59,-63,-64,-65,-66,-67,-68,-69,78,78,-49,-50,-51,-57,78,-54,78,78,78,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,78,78,-58,-52,78,-50,78,78,78,-35,78,78,-53,78,78,78,78,78,]),'EQUAL':([50,51,60,61,62,63,64,66,67,68,69,89,90,92,93,94,95,96,97,98,100,103,105,106,107,108,109,110,111,112,113,114,115,116,119,124,129,133,134,135,137,138,139,140,143,149,150,151,152,153,155,],[-55,79,-56,-59,-63,-64,-65,-66,-67,-68,-69,79,79,79,-50,-51,-57,79,-54,79,79,79,79,None,None,None,None,None,-77,-78,-79,-80,-81,79,79,-58,-52,79,-50,79,79,79,-35,79,79,-53,79,79,79,79,79,]),'LOWER':([50,51,60,61,62,63,64,66,67,68,69,89,90,92,93,94,95,96,97,98,100,103,105,106,107,108,109,110,111,112,113,114,115,116,119,124,129,133,134,135,137,138,139,140,143,149,150,151,152,153,155,],[-55,80,-56,-59,-63,-64,-65,-66,-67,-68,-69,80,80,80,-50,-51,-57,80,-54,80,80,80,80,None,None,None,None,None,-77,-78,-79,-80,-81,80,80,-58,-52,80,-50,80,80,80,-35,80,80,-53,80,80,80,80,80,]),'LOWER_EQUAL':([50,51,60,61,62,63,64,66,67,68,69,89,90,92,93,94,95,96,97,98,100,103,105,106,107,108,109,110,111,112,113,114,115,116,119,124,129,133,134,135,137,138,139,140,143,149,150,151,152,153,155,],[-55,81,-56,-59,-63,-64,-65,-66,-67,-68,-69,81,81,81,-50,-51,-57,81,-54,81,81,81,81,None,None,None,None,None,-77,-78,-79,-80,-81,81,81,-58,-52,81,-50,81,81,81,-35,81,81,-53,81,81,81,81,81,]),'GREATER':([50,51,60,61,62,63,64,66,67,68,69,89,90,92,93,94,95,96,97,98,100,103,105,106,107,108,109,110,111,112,113,114,115,116,119,124,129,133,134,135,137,138,139,140,143,149,150,151,152,153,155,],[-55,82,-56,-59,-63,-64,-65,-66,-67,-68,-69,82,82,82,-50,-51,-57,82,-54,82,82,82,82,None,None,None,None,None,-77,-78,-79,-80,-81,82,82,-58,-52,82,-50,82,82,82,-35,82,82,-53,82,82,82,82,82,]),'GREATER_EQUAL':([50,51,60,61,62,63,64,66,67,68,69,89,90,92,93,94,95,96,97,98,100,103,105,106,107,108,109,110,111,112,113,114,115,116,119,124,129,133,134,135,137,138,139,140,143,149,150,151,152,153,155,],[-55,83,-56,-59,-63,-64,-65,-66,-67,-68,-69,83,83,83,-50,-51,-57,83,-54,83,83,83,83,None,None,None,None,None,-77,-78,-79,-80,-81,83,83,-58,-52,83,-50,83,83,83,-35,83,83,-53,83,83,83,83,83,]),'PLUS':([50,51,60,61,62,63,64,66,67,68,69,89,90,92,93,94,95,96,97,98,100,103,105,106,107,108,109,110,111,112,113,114,115,116,119,124,129,133,134,135,137,138,139,140,143,149,150,151,152,153,155,],[-55,84,-56,-59,-63,-64,-65,-66,-67,-68,-69,84,84,84,-50,-51,-57,84,-54,84,84,84,84,84,84,84,84,84,-77,-78,-79,-80,-81,84,84,-58,-52,84,-50,84,84,84,-35,84,84,-53,84,84,84,84,84,]),'TIMES':([50,51,60,61,62,63,64,66,67,68,69,89,90,92,93,94,95,96,97,98,100,103,105,106,107,108,109,110,111,112,113,114,115,116,119,124,129,133,134,135,137,138,139,140,143,149,150,151,152,153,155,],[-55,86,-56,-59,-63,-64,-65,-66,-67,-68,-69,86,86,86,86,-51,-57,86,-54,86,86,86,86,86,86,86,86,86,86,86,-79,-80,-81,86,86,-58,-52,86,86,86,86,86,-35,86,86,-53,86,86,86,86,86,]),'DIV':([50,51,60,61,62,63,64,66,67,68,69,89,90,92,93,94,95,96,97,98,100,103,105,106,107,108,109,110,111,112,113,114,115,116,119,124,129,133,134,135,137,138,139,140,143,149,150,151,152,153,155,],[-55,87,-56,-59,-63,-64,-65,-66,-67,-68,-69,87,87,87,87,-51,-57,87,-54,87,87,87,87,87,87,87,87,87,87,87,-79,-80,-81,87,87,-58,-52,87,87,87,87,87,-35,87,87,-53,87,87,87,87,87,]),'POW':([50,51,60,61,62,63,64,66,67,68,69,89,90,92,93,94,95,96,97,98,100,103,105,106,107,108,109,110,111,112,113,114,115,116,119,124,129,133,134,135,137,138,139,140,143,149,150,151,152,153,155,],[-55,88,-56,-59,-63,-64,-65,-66,-67,-68,-69,88,88,88,88,88,-57,88,-54,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-58,-52,88,88,88,88,88,-35,88,88,-53,88,88,88,88,88,]),'THEN':([50,60,61,62,63,64,66,67,68,69,89,92,93,94,95,97,100,105,106,107,108,109,110,111,112,113,114,115,116,119,124,129,133,134,135,137,139,143,149,150,151,153,155,],[-55,-56,-59,-63,-64,-65,-66,-67,-68,-69,117,-49,-50,-51,-57,-54,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,-43,-58,-52,-38,-50,-42,-46,-35,-41,-53,-39,-44,-47,-45,]),'DO':([50,60,61,62,63,64,66,67,68,69,90,92,93,94,95,97,100,105,106,107,108,109,110,111,112,113,114,115,116,119,124,129,133,134,135,137,139,143,149,150,151,153,155,],[-55,-56,-59,-63,-64,-65,-66,-67,-68,-69,120,-49,-50,-51,-57,-54,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-40,-43,-58,-52,-38,-50,-42,-46,-35,-41,-53,-39,-44,-47,-45,]),'ELSE':([50,60,61,62,63,64,66,67,68,69,92,93,94,95,97,100,105,106,107,108,109,110,111,112,113,114,115,116,119,124,129,133,134,135,137,139,143,149,150,151,153,155,],[-55,-56,-59,-63,-64,-65,-66,-67,-68,-69,-49,-50,-51,-57,-54,-48,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,132,-43,-58,-52,144,-50,-42,-46,-35,-41,-53,-39,-44,-47,-45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,5,]),'class':([0,2,],[2,2,]),'class_body':([3,4,6,19,28,29,],[7,15,17,30,43,44,]),'class_body_aux':([3,4,6,9,12,13,19,28,29,],[10,10,10,20,24,25,10,10,10,]),'empty':([3,4,6,9,19,27,28,29,49,75,98,130,131,140,],[11,11,11,21,11,41,11,11,41,102,127,102,102,127,]),'field':([3,4,6,9,12,13,19,28,29,],[12,12,12,12,12,12,12,12,12,]),'method':([3,4,6,9,12,13,19,28,29,],[13,13,13,13,13,13,13,13,13,]),'type':([26,47,71,121,],[33,70,99,136,]),'formals':([27,49,],[40,73,]),'formal':([27,49,],[42,42,]),'expr':([46,52,53,55,56,57,58,65,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,117,118,120,122,123,126,130,131,132,144,145,146,147,154,],[51,89,90,92,93,94,96,98,100,103,105,106,107,108,109,110,111,112,113,114,115,116,119,133,134,135,137,138,140,103,103,143,150,151,152,153,155,]),'literal':([46,52,53,55,56,57,58,65,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,117,118,120,122,123,126,130,131,132,144,145,146,147,154,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'block':([46,48,52,53,55,56,57,58,65,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,99,117,118,120,122,123,126,130,131,132,144,145,146,147,154,],[61,72,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,128,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'integer_literal':([46,52,53,55,56,57,58,65,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,117,118,120,122,123,126,130,131,132,144,145,146,147,154,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'string_literal':([46,52,53,55,56,57,58,65,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,117,118,120,122,123,126,130,131,132,144,145,146,147,154,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'boolean_literal':([46,52,53,55,56,57,58,65,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,117,118,120,122,123,126,130,131,132,144,145,146,147,154,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'args':([75,130,131,],[101,141,142,]),'block_aux':([98,140,],[125,148,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class program','program',2,'p_program','parser.py',87),
  ('program -> class','program',1,'p_program','parser.py',88),
  ('class -> CLASS TYPE_IDENTIFIER class_body','class',3,'p_class','parser.py',95),
  ('class -> CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class_body','class',5,'p_class','parser.py',96),
  ('class -> TYPE_IDENTIFIER class_body','class',2,'p_class','parser.py',97),
  ('class -> TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class_body','class',4,'p_class','parser.py',98),
  ('class -> CLASS class_body','class',2,'p_class','parser.py',99),
  ('class -> CLASS EXTENDS TYPE_IDENTIFIER class_body','class',4,'p_class','parser.py',100),
  ('class_body -> LBRACE class_body_aux RBRACE','class_body',3,'p_class_body','parser.py',143),
  ('class_body -> LBRACE empty RBRACE','class_body',3,'p_class_body','parser.py',144),
  ('class_body -> class_body_aux RBRACE','class_body',2,'p_class_body','parser.py',145),
  ('class_body -> empty RBRACE','class_body',2,'p_class_body','parser.py',146),
  ('class_body -> LBRACE class_body_aux','class_body',2,'p_class_body','parser.py',147),
  ('class_body -> LBRACE empty','class_body',2,'p_class_body','parser.py',148),
  ('class_body_aux -> field class_body_aux','class_body_aux',2,'p_class_body_aux','parser.py',165),
  ('class_body_aux -> method class_body_aux','class_body_aux',2,'p_class_body_aux','parser.py',166),
  ('class_body_aux -> field','class_body_aux',1,'p_class_body_aux','parser.py',167),
  ('class_body_aux -> method','class_body_aux',1,'p_class_body_aux','parser.py',168),
  ('field -> OBJECT_IDENTIFIER COLON type SEMICOLON','field',4,'p_field','parser.py',184),
  ('field -> OBJECT_IDENTIFIER COLON type ASSIGN expr SEMICOLON','field',6,'p_field','parser.py',185),
  ('field -> OBJECT_IDENTIFIER COLON type','field',3,'p_field','parser.py',186),
  ('field -> OBJECT_IDENTIFIER COLON type ASSIGN expr','field',5,'p_field','parser.py',187),
  ('method -> OBJECT_IDENTIFIER LPAR formals RPAR COLON type block','method',7,'p_method','parser.py',208),
  ('method -> OBJECT_IDENTIFIER LPAR formals RPAR block','method',5,'p_method','parser.py',209),
  ('type -> TYPE_IDENTIFIER','type',1,'p_type','parser.py',232),
  ('type -> INT32','type',1,'p_type','parser.py',233),
  ('type -> BOOL','type',1,'p_type','parser.py',234),
  ('type -> STRING','type',1,'p_type','parser.py',235),
  ('type -> UNIT','type',1,'p_type','parser.py',236),
  ('formals -> empty','formals',1,'p_formals','parser.py',243),
  ('formals -> formal','formals',1,'p_formals','parser.py',244),
  ('formals -> formal COMMA formals','formals',3,'p_formals','parser.py',245),
  ('formal -> OBJECT_IDENTIFIER COLON type','formal',3,'p_formal','parser.py',260),
  ('formal -> OBJECT_IDENTIFIER','formal',1,'p_formal','parser.py',261),
  ('block -> LBRACE expr block_aux RBRACE','block',4,'p_block','parser.py',277),
  ('block_aux -> SEMICOLON expr block_aux','block_aux',3,'p_block_aux','parser.py',302),
  ('block_aux -> empty','block_aux',1,'p_block_aux','parser.py',303),
  ('expr -> IF expr THEN expr','expr',4,'p_expr_if','parser.py',321),
  ('expr -> IF expr THEN expr ELSE expr','expr',6,'p_expr_if','parser.py',322),
  ('expr -> IF expr expr','expr',3,'p_expr_if','parser.py',323),
  ('expr -> IF expr expr ELSE expr','expr',5,'p_expr_if','parser.py',324),
  ('expr -> WHILE expr DO expr','expr',4,'p_expr_while','parser.py',345),
  ('expr -> WHILE expr expr','expr',3,'p_expr_while','parser.py',346),
  ('expr -> LET OBJECT_IDENTIFIER COLON type IN expr','expr',6,'p_expr_let','parser.py',362),
  ('expr -> LET OBJECT_IDENTIFIER COLON type ASSIGN expr IN expr','expr',8,'p_expr_let','parser.py',363),
  ('expr -> LET OBJECT_IDENTIFIER IN expr','expr',4,'p_expr_let','parser.py',364),
  ('expr -> LET OBJECT_IDENTIFIER ASSIGN expr IN expr','expr',6,'p_expr_let','parser.py',365),
  ('expr -> OBJECT_IDENTIFIER ASSIGN expr','expr',3,'p_expr_assign','parser.py',386),
  ('expr -> NOT expr','expr',2,'p_expr_unop','parser.py',398),
  ('expr -> MINUS expr','expr',2,'p_expr_unop','parser.py',399),
  ('expr -> ISNULL expr','expr',2,'p_expr_unop','parser.py',400),
  ('expr -> OBJECT_IDENTIFIER LPAR args RPAR','expr',4,'p_expr_call','parser.py',432),
  ('expr -> expr DOT OBJECT_IDENTIFIER LPAR args RPAR','expr',6,'p_expr_call','parser.py',433),
  ('expr -> NEW TYPE_IDENTIFIER','expr',2,'p_expr_new','parser.py',463),
  ('expr -> OBJECT_IDENTIFIER','expr',1,'p_expr_obj_id','parser.py',475),
  ('expr -> literal','expr',1,'p_expr_literal','parser.py',487),
  ('expr -> LPAR RPAR','expr',2,'p_expr_unit','parser.py',494),
  ('expr -> LPAR expr RPAR','expr',3,'p_expr_par','parser.py',506),
  ('expr -> block','expr',1,'p_expr_block','parser.py',513),
  ('args -> empty','args',1,'p_args','parser.py',520),
  ('args -> expr','args',1,'p_args','parser.py',521),
  ('args -> expr COMMA args','args',3,'p_args','parser.py',522),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',537),
  ('literal -> string_literal','literal',1,'p_literal','parser.py',538),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',539),
  ('integer_literal -> INTEGER_LITERAL','integer_literal',1,'p_integer_literal','parser.py',546),
  ('string_literal -> STRING_LITERAL','string_literal',1,'p_string_literal','parser.py',558),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',570),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',571),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',583),
  ('expr -> expr AND expr','expr',3,'p_expr_binop','parser.py',684),
  ('expr -> expr EQUAL expr','expr',3,'p_expr_binop','parser.py',685),
  ('expr -> expr LOWER expr','expr',3,'p_expr_binop','parser.py',686),
  ('expr -> expr LOWER_EQUAL expr','expr',3,'p_expr_binop','parser.py',687),
  ('expr -> expr GREATER expr','expr',3,'p_expr_binop','parser.py',688),
  ('expr -> expr GREATER_EQUAL expr','expr',3,'p_expr_binop','parser.py',689),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binop','parser.py',690),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binop','parser.py',691),
  ('expr -> expr TIMES expr','expr',3,'p_expr_binop','parser.py',692),
  ('expr -> expr DIV expr','expr',3,'p_expr_binop','parser.py',693),
  ('expr -> expr POW expr','expr',3,'p_expr_binop','parser.py',694),
]
