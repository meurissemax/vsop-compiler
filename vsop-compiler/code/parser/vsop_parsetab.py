
# vsop_parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftANDrightNOTnonassocLOWERLOWER_EQUALEQUALleftPLUSMINUSleftTIMESDIVrightISNULLrightPOWleftDOTAND ASSIGN BOOL CLASS COLON COMMA DIV DO DOT ELSE EQUAL EXTENDS FALSE IF IN INT32 INTEGER_LITERAL ISNULL LBRACE LET LOWER LOWER_EQUAL LPAR MINUS NEW NOT OBJECT_IDENTIFIER PLUS POW RBRACE RPAR SEMICOLON STRING STRING_LITERAL THEN TIMES TRUE TYPE_IDENTIFIER UNIT WHILE\n        program : class program\n                | class\n        \n        class : CLASS TYPE_IDENTIFIER class_body\n              | CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class_body\n        \n        class_body : LBRACE class_body_aux RBRACE\n                   | LBRACE empty RBRACE\n        \n        class_body_aux : field class_body_aux\n                       | method class_body_aux\n                       | field\n                       | method\n        \n        field : OBJECT_IDENTIFIER COLON type SEMICOLON\n              | OBJECT_IDENTIFIER COLON type ASSIGN expr SEMICOLON\n        \n        method : OBJECT_IDENTIFIER LPAR formals RPAR COLON type block\n        \n        type : TYPE_IDENTIFIER\n             | INT32\n             | BOOL\n             | STRING\n             | UNIT\n        \n        formals : empty\n                | formal\n                | formal COMMA formals\n        \n        formal : OBJECT_IDENTIFIER COLON type\n        \n        block : LBRACE expr block_aux RBRACE\n        \n        block_aux : SEMICOLON expr block_aux\n                  | empty\n        \n        expr : IF expr THEN expr\n             | IF expr THEN expr ELSE expr\n        \n        expr : WHILE expr DO expr\n        \n        expr : LET OBJECT_IDENTIFIER COLON type IN expr\n             | LET OBJECT_IDENTIFIER COLON type ASSIGN expr IN expr\n        \n        expr : OBJECT_IDENTIFIER ASSIGN expr\n        \n        expr : NOT expr\n             | MINUS expr\n             | ISNULL expr\n        \n        expr : expr AND expr\n             | expr EQUAL expr\n             | expr LOWER expr\n             | expr LOWER_EQUAL expr\n             | expr PLUS expr\n             | expr MINUS expr\n             | expr TIMES expr\n             | expr DIV expr\n             | expr POW expr\n        \n        expr : OBJECT_IDENTIFIER LPAR args RPAR\n             | expr DOT OBJECT_IDENTIFIER LPAR args RPAR\n        \n        expr : NEW TYPE_IDENTIFIER\n        \n        expr : OBJECT_IDENTIFIER\n        \n        expr : literal\n        \n        expr : LPAR RPAR\n        \n        expr : LPAR expr RPAR\n        \n        expr : block\n        \n        args : empty\n             | expr\n             | expr COMMA args\n        \n        literal : integer_literal\n                | string_literal\n                | boolean_literal\n        \n        integer_literal : INTEGER_LITERAL\n        \n        string_literal : STRING_LITERAL\n        \n        boolean_literal : TRUE\n                        | FALSE\n        \n        empty :\n        '
    
_lr_action_items = {'CLASS':([0,2,6,15,16,17,],[3,3,-3,-4,-5,-6,]),'$end':([1,2,4,6,15,16,17,],[0,-2,-1,-3,-4,-5,-6,]),'TYPE_IDENTIFIER':([3,7,20,34,46,58,100,],[5,9,23,23,81,23,23,]),'EXTENDS':([5,],[7,]),'LBRACE':([5,9,23,24,25,26,27,33,39,40,42,43,44,45,52,60,61,63,64,65,66,67,68,69,70,71,83,98,99,103,107,108,116,117,118,124,],[8,8,-14,-15,-16,-17,-18,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'RBRACE':([8,10,11,12,13,18,19,32,37,47,48,49,50,51,53,54,55,56,62,76,77,78,79,81,82,84,88,89,90,91,92,93,94,95,96,101,102,104,105,106,109,110,112,113,119,120,121,122,125,],[-62,16,17,-9,-10,-7,-8,-11,-47,-48,-51,-55,-56,-57,-58,-59,-60,-61,-12,-32,-33,-34,-49,-46,-62,-31,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,112,-25,-13,-44,-26,-28,-23,-62,-24,-45,-27,-29,-30,]),'OBJECT_IDENTIFIER':([8,12,13,21,32,33,36,39,40,41,42,43,44,45,52,60,61,62,63,64,65,66,67,68,69,70,71,72,98,99,103,105,107,108,112,116,117,118,124,],[14,14,14,28,-11,37,28,37,37,75,37,37,37,37,37,37,37,-12,37,37,37,37,37,37,37,37,37,97,37,37,37,-13,37,37,-23,37,37,37,37,]),'COLON':([14,28,35,75,],[20,34,58,100,]),'LPAR':([14,33,37,39,40,42,43,44,45,52,60,61,63,64,65,66,67,68,69,70,71,97,98,99,103,107,108,116,117,118,124,],[21,45,61,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,108,45,45,45,45,45,45,45,45,45,]),'INT32':([20,34,58,100,],[24,24,24,24,]),'BOOL':([20,34,58,100,],[25,25,25,25,]),'STRING':([20,34,58,100,],[26,26,26,26,]),'UNIT':([20,34,58,100,],[27,27,27,27,]),'RPAR':([21,23,24,25,26,27,29,30,31,36,37,45,47,48,49,50,51,53,54,55,56,57,59,61,76,77,78,79,80,81,84,85,86,87,88,89,90,91,92,93,94,95,96,101,106,107,108,109,110,112,114,115,120,121,122,125,],[-62,-14,-15,-16,-17,-18,35,-19,-20,-62,-47,79,-48,-51,-55,-56,-57,-58,-59,-60,-61,-22,-21,-62,-32,-33,-34,-49,101,-46,-31,106,-52,-53,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-44,-62,-62,-26,-28,-23,-54,120,-45,-27,-29,-30,]),'SEMICOLON':([22,23,24,25,26,27,37,38,47,48,49,50,51,53,54,55,56,76,77,78,79,81,82,84,88,89,90,91,92,93,94,95,96,101,106,109,110,112,113,120,121,122,125,],[32,-14,-15,-16,-17,-18,-47,62,-48,-51,-55,-56,-57,-58,-59,-60,-61,-32,-33,-34,-49,-46,103,-31,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-44,-26,-28,-23,103,-45,-27,-29,-30,]),'ASSIGN':([22,23,24,25,26,27,37,111,],[33,-14,-15,-16,-17,-18,60,118,]),'COMMA':([23,24,25,26,27,31,37,47,48,49,50,51,53,54,55,56,57,76,77,78,79,81,84,87,88,89,90,91,92,93,94,95,96,101,106,109,110,112,120,121,122,125,],[-14,-15,-16,-17,-18,36,-47,-48,-51,-55,-56,-57,-58,-59,-60,-61,-22,-32,-33,-34,-49,-46,-31,107,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-44,-26,-28,-23,-45,-27,-29,-30,]),'IN':([23,24,25,26,27,37,47,48,49,50,51,53,54,55,56,76,77,78,79,81,84,88,89,90,91,92,93,94,95,96,101,106,109,110,111,112,120,121,122,123,125,],[-14,-15,-16,-17,-18,-47,-48,-51,-55,-56,-57,-58,-59,-60,-61,-32,-33,-34,-49,-46,-31,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-44,-26,-28,117,-23,-45,-27,-29,124,-30,]),'IF':([33,39,40,42,43,44,45,52,60,61,63,64,65,66,67,68,69,70,71,98,99,103,107,108,116,117,118,124,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'WHILE':([33,39,40,42,43,44,45,52,60,61,63,64,65,66,67,68,69,70,71,98,99,103,107,108,116,117,118,124,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'LET':([33,39,40,42,43,44,45,52,60,61,63,64,65,66,67,68,69,70,71,98,99,103,107,108,116,117,118,124,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'NOT':([33,39,40,42,43,44,45,52,60,61,63,64,65,66,67,68,69,70,71,98,99,103,107,108,116,117,118,124,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'MINUS':([33,37,38,39,40,42,43,44,45,47,48,49,50,51,52,53,54,55,56,60,61,63,64,65,66,67,68,69,70,71,73,74,76,77,78,79,80,81,82,84,87,88,89,90,91,92,93,94,95,96,98,99,101,103,106,107,108,109,110,112,113,116,117,118,120,121,122,123,124,125,],[43,-47,68,43,43,43,43,43,43,-48,-51,-55,-56,-57,43,-58,-59,-60,-61,43,43,43,43,43,43,43,43,43,43,43,68,68,68,-33,-34,-49,68,-46,68,68,68,68,68,68,68,-39,-40,-41,-42,-43,43,43,-50,43,-44,43,43,68,68,-23,68,43,43,43,-45,68,68,68,43,68,]),'ISNULL':([33,39,40,42,43,44,45,52,60,61,63,64,65,66,67,68,69,70,71,98,99,103,107,108,116,117,118,124,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'NEW':([33,39,40,42,43,44,45,52,60,61,63,64,65,66,67,68,69,70,71,98,99,103,107,108,116,117,118,124,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'INTEGER_LITERAL':([33,39,40,42,43,44,45,52,60,61,63,64,65,66,67,68,69,70,71,98,99,103,107,108,116,117,118,124,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'STRING_LITERAL':([33,39,40,42,43,44,45,52,60,61,63,64,65,66,67,68,69,70,71,98,99,103,107,108,116,117,118,124,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'TRUE':([33,39,40,42,43,44,45,52,60,61,63,64,65,66,67,68,69,70,71,98,99,103,107,108,116,117,118,124,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'FALSE':([33,39,40,42,43,44,45,52,60,61,63,64,65,66,67,68,69,70,71,98,99,103,107,108,116,117,118,124,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'AND':([37,38,47,48,49,50,51,53,54,55,56,73,74,76,77,78,79,80,81,82,84,87,88,89,90,91,92,93,94,95,96,101,106,109,110,112,113,120,121,122,123,125,],[-47,63,-48,-51,-55,-56,-57,-58,-59,-60,-61,63,63,-32,-33,-34,-49,63,-46,63,63,63,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-44,63,63,-23,63,-45,63,63,63,63,]),'EQUAL':([37,38,47,48,49,50,51,53,54,55,56,73,74,76,77,78,79,80,81,82,84,87,88,89,90,91,92,93,94,95,96,101,106,109,110,112,113,120,121,122,123,125,],[-47,64,-48,-51,-55,-56,-57,-58,-59,-60,-61,64,64,64,-33,-34,-49,64,-46,64,64,64,64,None,None,None,-39,-40,-41,-42,-43,-50,-44,64,64,-23,64,-45,64,64,64,64,]),'LOWER':([37,38,47,48,49,50,51,53,54,55,56,73,74,76,77,78,79,80,81,82,84,87,88,89,90,91,92,93,94,95,96,101,106,109,110,112,113,120,121,122,123,125,],[-47,65,-48,-51,-55,-56,-57,-58,-59,-60,-61,65,65,65,-33,-34,-49,65,-46,65,65,65,65,None,None,None,-39,-40,-41,-42,-43,-50,-44,65,65,-23,65,-45,65,65,65,65,]),'LOWER_EQUAL':([37,38,47,48,49,50,51,53,54,55,56,73,74,76,77,78,79,80,81,82,84,87,88,89,90,91,92,93,94,95,96,101,106,109,110,112,113,120,121,122,123,125,],[-47,66,-48,-51,-55,-56,-57,-58,-59,-60,-61,66,66,66,-33,-34,-49,66,-46,66,66,66,66,None,None,None,-39,-40,-41,-42,-43,-50,-44,66,66,-23,66,-45,66,66,66,66,]),'PLUS':([37,38,47,48,49,50,51,53,54,55,56,73,74,76,77,78,79,80,81,82,84,87,88,89,90,91,92,93,94,95,96,101,106,109,110,112,113,120,121,122,123,125,],[-47,67,-48,-51,-55,-56,-57,-58,-59,-60,-61,67,67,67,-33,-34,-49,67,-46,67,67,67,67,67,67,67,-39,-40,-41,-42,-43,-50,-44,67,67,-23,67,-45,67,67,67,67,]),'TIMES':([37,38,47,48,49,50,51,53,54,55,56,73,74,76,77,78,79,80,81,82,84,87,88,89,90,91,92,93,94,95,96,101,106,109,110,112,113,120,121,122,123,125,],[-47,69,-48,-51,-55,-56,-57,-58,-59,-60,-61,69,69,69,69,-34,-49,69,-46,69,69,69,69,69,69,69,69,69,-41,-42,-43,-50,-44,69,69,-23,69,-45,69,69,69,69,]),'DIV':([37,38,47,48,49,50,51,53,54,55,56,73,74,76,77,78,79,80,81,82,84,87,88,89,90,91,92,93,94,95,96,101,106,109,110,112,113,120,121,122,123,125,],[-47,70,-48,-51,-55,-56,-57,-58,-59,-60,-61,70,70,70,70,-34,-49,70,-46,70,70,70,70,70,70,70,70,70,-41,-42,-43,-50,-44,70,70,-23,70,-45,70,70,70,70,]),'POW':([37,38,47,48,49,50,51,53,54,55,56,73,74,76,77,78,79,80,81,82,84,87,88,89,90,91,92,93,94,95,96,101,106,109,110,112,113,120,121,122,123,125,],[-47,71,-48,-51,-55,-56,-57,-58,-59,-60,-61,71,71,71,71,71,-49,71,-46,71,71,71,71,71,71,71,71,71,71,71,71,-50,-44,71,71,-23,71,-45,71,71,71,71,]),'DOT':([37,38,47,48,49,50,51,53,54,55,56,73,74,76,77,78,79,80,81,82,84,87,88,89,90,91,92,93,94,95,96,101,106,109,110,112,113,120,121,122,123,125,],[-47,72,-48,-51,-55,-56,-57,-58,-59,-60,-61,72,72,72,72,72,-49,72,-46,72,72,72,72,72,72,72,72,72,72,72,72,-50,-44,72,72,-23,72,-45,72,72,72,72,]),'THEN':([37,47,48,49,50,51,53,54,55,56,73,76,77,78,79,81,84,88,89,90,91,92,93,94,95,96,101,106,109,110,112,120,121,122,125,],[-47,-48,-51,-55,-56,-57,-58,-59,-60,-61,98,-32,-33,-34,-49,-46,-31,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-44,-26,-28,-23,-45,-27,-29,-30,]),'DO':([37,47,48,49,50,51,53,54,55,56,74,76,77,78,79,81,84,88,89,90,91,92,93,94,95,96,101,106,109,110,112,120,121,122,125,],[-47,-48,-51,-55,-56,-57,-58,-59,-60,-61,99,-32,-33,-34,-49,-46,-31,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-44,-26,-28,-23,-45,-27,-29,-30,]),'ELSE':([37,47,48,49,50,51,53,54,55,56,76,77,78,79,81,84,88,89,90,91,92,93,94,95,96,101,106,109,110,112,120,121,122,125,],[-47,-48,-51,-55,-56,-57,-58,-59,-60,-61,-32,-33,-34,-49,-46,-31,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-44,116,-28,-23,-45,-27,-29,-30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,4,]),'class':([0,2,],[2,2,]),'class_body':([5,9,],[6,15,]),'class_body_aux':([8,12,13,],[10,18,19,]),'empty':([8,21,36,61,82,107,108,113,],[11,30,30,86,104,86,86,104,]),'field':([8,12,13,],[12,12,12,]),'method':([8,12,13,],[13,13,13,]),'type':([20,34,58,100,],[22,57,83,111,]),'formals':([21,36,],[29,59,]),'formal':([21,36,],[31,31,]),'expr':([33,39,40,42,43,44,45,52,60,61,63,64,65,66,67,68,69,70,71,98,99,103,107,108,116,117,118,124,],[38,73,74,76,77,78,80,82,84,87,88,89,90,91,92,93,94,95,96,109,110,113,87,87,121,122,123,125,]),'literal':([33,39,40,42,43,44,45,52,60,61,63,64,65,66,67,68,69,70,71,98,99,103,107,108,116,117,118,124,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'block':([33,39,40,42,43,44,45,52,60,61,63,64,65,66,67,68,69,70,71,83,98,99,103,107,108,116,117,118,124,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,105,48,48,48,48,48,48,48,48,48,]),'integer_literal':([33,39,40,42,43,44,45,52,60,61,63,64,65,66,67,68,69,70,71,98,99,103,107,108,116,117,118,124,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'string_literal':([33,39,40,42,43,44,45,52,60,61,63,64,65,66,67,68,69,70,71,98,99,103,107,108,116,117,118,124,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'boolean_literal':([33,39,40,42,43,44,45,52,60,61,63,64,65,66,67,68,69,70,71,98,99,103,107,108,116,117,118,124,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'args':([61,107,108,],[85,114,115,]),'block_aux':([82,113,],[102,119,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class program','program',2,'p_program','vsop_parser.py',89),
  ('program -> class','program',1,'p_program','vsop_parser.py',90),
  ('class -> CLASS TYPE_IDENTIFIER class_body','class',3,'p_class','vsop_parser.py',97),
  ('class -> CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class_body','class',5,'p_class','vsop_parser.py',98),
  ('class_body -> LBRACE class_body_aux RBRACE','class_body',3,'p_class_body','vsop_parser.py',133),
  ('class_body -> LBRACE empty RBRACE','class_body',3,'p_class_body','vsop_parser.py',134),
  ('class_body_aux -> field class_body_aux','class_body_aux',2,'p_class_body_aux','vsop_parser.py',141),
  ('class_body_aux -> method class_body_aux','class_body_aux',2,'p_class_body_aux','vsop_parser.py',142),
  ('class_body_aux -> field','class_body_aux',1,'p_class_body_aux','vsop_parser.py',143),
  ('class_body_aux -> method','class_body_aux',1,'p_class_body_aux','vsop_parser.py',144),
  ('field -> OBJECT_IDENTIFIER COLON type SEMICOLON','field',4,'p_field','vsop_parser.py',160),
  ('field -> OBJECT_IDENTIFIER COLON type ASSIGN expr SEMICOLON','field',6,'p_field','vsop_parser.py',161),
  ('method -> OBJECT_IDENTIFIER LPAR formals RPAR COLON type block','method',7,'p_method','vsop_parser.py',178),
  ('type -> TYPE_IDENTIFIER','type',1,'p_type','vsop_parser.py',197),
  ('type -> INT32','type',1,'p_type','vsop_parser.py',198),
  ('type -> BOOL','type',1,'p_type','vsop_parser.py',199),
  ('type -> STRING','type',1,'p_type','vsop_parser.py',200),
  ('type -> UNIT','type',1,'p_type','vsop_parser.py',201),
  ('formals -> empty','formals',1,'p_formals','vsop_parser.py',208),
  ('formals -> formal','formals',1,'p_formals','vsop_parser.py',209),
  ('formals -> formal COMMA formals','formals',3,'p_formals','vsop_parser.py',210),
  ('formal -> OBJECT_IDENTIFIER COLON type','formal',3,'p_formal','vsop_parser.py',225),
  ('block -> LBRACE expr block_aux RBRACE','block',4,'p_block','vsop_parser.py',237),
  ('block_aux -> SEMICOLON expr block_aux','block_aux',3,'p_block_aux','vsop_parser.py',262),
  ('block_aux -> empty','block_aux',1,'p_block_aux','vsop_parser.py',263),
  ('expr -> IF expr THEN expr','expr',4,'p_expr_if','vsop_parser.py',281),
  ('expr -> IF expr THEN expr ELSE expr','expr',6,'p_expr_if','vsop_parser.py',282),
  ('expr -> WHILE expr DO expr','expr',4,'p_expr_while','vsop_parser.py',299),
  ('expr -> LET OBJECT_IDENTIFIER COLON type IN expr','expr',6,'p_expr_let','vsop_parser.py',311),
  ('expr -> LET OBJECT_IDENTIFIER COLON type ASSIGN expr IN expr','expr',8,'p_expr_let','vsop_parser.py',312),
  ('expr -> OBJECT_IDENTIFIER ASSIGN expr','expr',3,'p_expr_assign','vsop_parser.py',329),
  ('expr -> NOT expr','expr',2,'p_expr_unop','vsop_parser.py',341),
  ('expr -> MINUS expr','expr',2,'p_expr_unop','vsop_parser.py',342),
  ('expr -> ISNULL expr','expr',2,'p_expr_unop','vsop_parser.py',343),
  ('expr -> expr AND expr','expr',3,'p_expr_binop','vsop_parser.py',355),
  ('expr -> expr EQUAL expr','expr',3,'p_expr_binop','vsop_parser.py',356),
  ('expr -> expr LOWER expr','expr',3,'p_expr_binop','vsop_parser.py',357),
  ('expr -> expr LOWER_EQUAL expr','expr',3,'p_expr_binop','vsop_parser.py',358),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binop','vsop_parser.py',359),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binop','vsop_parser.py',360),
  ('expr -> expr TIMES expr','expr',3,'p_expr_binop','vsop_parser.py',361),
  ('expr -> expr DIV expr','expr',3,'p_expr_binop','vsop_parser.py',362),
  ('expr -> expr POW expr','expr',3,'p_expr_binop','vsop_parser.py',363),
  ('expr -> OBJECT_IDENTIFIER LPAR args RPAR','expr',4,'p_expr_call','vsop_parser.py',375),
  ('expr -> expr DOT OBJECT_IDENTIFIER LPAR args RPAR','expr',6,'p_expr_call','vsop_parser.py',376),
  ('expr -> NEW TYPE_IDENTIFIER','expr',2,'p_expr_new','vsop_parser.py',406),
  ('expr -> OBJECT_IDENTIFIER','expr',1,'p_expr_obj_id','vsop_parser.py',418),
  ('expr -> literal','expr',1,'p_expr_literal','vsop_parser.py',430),
  ('expr -> LPAR RPAR','expr',2,'p_expr_unit','vsop_parser.py',437),
  ('expr -> LPAR expr RPAR','expr',3,'p_expr_par','vsop_parser.py',449),
  ('expr -> block','expr',1,'p_expr_block','vsop_parser.py',456),
  ('args -> empty','args',1,'p_args','vsop_parser.py',463),
  ('args -> expr','args',1,'p_args','vsop_parser.py',464),
  ('args -> expr COMMA args','args',3,'p_args','vsop_parser.py',465),
  ('literal -> integer_literal','literal',1,'p_literal','vsop_parser.py',480),
  ('literal -> string_literal','literal',1,'p_literal','vsop_parser.py',481),
  ('literal -> boolean_literal','literal',1,'p_literal','vsop_parser.py',482),
  ('integer_literal -> INTEGER_LITERAL','integer_literal',1,'p_integer_literal','vsop_parser.py',489),
  ('string_literal -> STRING_LITERAL','string_literal',1,'p_string_literal','vsop_parser.py',501),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','vsop_parser.py',513),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','vsop_parser.py',514),
  ('empty -> <empty>','empty',0,'p_empty','vsop_parser.py',526),
]
